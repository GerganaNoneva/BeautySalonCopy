import { Platform } from 'react-native';

/**
 * Firebase Native Phone Authentication Service
 * –ò–∑–ø–æ–ª–∑–≤–∞ @react-native-firebase/auth –∑–∞ —Ä–µ–∞–ª–Ω–∏ SMS –Ω–∞ iOS/Android
 *
 * –í–ê–ñ–ù–û: –¢–æ–∑–∏ –º–æ–¥—É–ª —Ä–∞–±–æ—Ç–∏ —Å–∞–º–æ —Å–ª–µ–¥ `npx expo prebuild`
 */

let auth: any = null;

// –î–∏–Ω–∞–º–∏—á–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–º–µ Firebase —Å–∞–º–æ –∞–∫–æ –µ –Ω–∞–ª–∏—á–µ–Ω (—Å–ª–µ–¥ prebuild)
try {
  if (Platform.OS !== 'web') {
    auth = require('@react-native-firebase/auth').default;
    console.log('‚úÖ React Native Firebase Auth loaded');
  }
} catch (error) {
  console.log('‚ö†Ô∏è React Native Firebase not available (use prebuild first)');
}

let confirmationResult: any = null;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ React Native Firebase –µ –Ω–∞–ª–∏—á–Ω–∏
 */
export function isNativeFirebaseAvailable(): boolean {
  return auth !== null && Platform.OS !== 'web';
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä –∫—ä–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç
 */
function normalizePhone(phone: string): string {
  const cleaned = phone.replace(/\D/g, '');

  if (cleaned.startsWith('359')) {
    return `+${cleaned}`;
  }

  if (cleaned.startsWith('0')) {
    return `+359${cleaned.substring(1)}`;
  }

  return `+359${cleaned}`;
}

/**
 * –ò–∑–ø—Ä–∞—â–∞ SMS –∫–æ–¥ –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á—Ä–µ–∑ Firebase Native
 * @param phone –¢–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä
 * @returns Promise —Å —Ä–µ–∑—É–ª—Ç–∞—Ç
 */
export async function sendNativeFirebaseVerificationCode(
  phone: string
): Promise<{ success: boolean; error?: string }> {
  if (!isNativeFirebaseAvailable()) {
    return {
      success: false,
      error: 'React Native Firebase –Ω–µ –µ –Ω–∞–ª–∏—á–µ–Ω. –ú–æ–ª—è, –∏–∑–ø—ä–ª–Ω–µ—Ç–µ: npx expo prebuild',
    };
  }

  try {
    const normalizedPhone = normalizePhone(phone);
    console.log(`üì± Sending Firebase Native SMS to: ${normalizedPhone}`);

    // –ò–∑–ø–æ–ª–∑–≤–∞–º–µ React Native Firebase –∑–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ SMS
    confirmationResult = await auth().signInWithPhoneNumber(normalizedPhone);

    console.log('‚úÖ Firebase Native SMS sent successfully');
    return { success: true };
  } catch (error: any) {
    console.error('‚ùå Firebase Native SMS error:', error);
    console.error('Error code:', error.code);
    console.error('Error message:', error.message);

    let errorMessage = '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ SMS';

    if (error.code === 'auth/invalid-phone-number') {
      errorMessage = '–ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä';
    } else if (error.code === 'auth/too-many-requests') {
      errorMessage = '–¢–≤—ä—Ä–¥–µ –º–Ω–æ–≥–æ –æ–ø–∏—Ç–∏. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –ø–æ-–∫—ä—Å–Ω–æ.';
    } else if (error.code === 'auth/quota-exceeded') {
      errorMessage = '–î–æ—Å—Ç–∏–≥–Ω–∞—Ç –ª–∏–º–∏—Ç –Ω–∞ SMS-–∏. –°–≤—ä—Ä–∂–µ—Ç–µ —Å–µ —Å –ø–æ–¥–¥—Ä—ä–∂–∫–∞.';
    } else if (error.code === 'auth/operation-not-allowed') {
      errorMessage = 'Phone Authentication –Ω–µ –µ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω –≤—ä–≤ Firebase Console.';
    } else if (error.message) {
      errorMessage = `Firebase –≥—Ä–µ—à–∫–∞: ${error.message}`;
    }

    return {
      success: false,
      error: errorMessage,
    };
  }
}

/**
 * –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–∞ SMS –∫–æ–¥ –∏–∑–ø—Ä–∞—Ç–µ–Ω —á—Ä–µ–∑ Firebase Native
 * @param code 6-—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥
 * @returns Promise —Å —Ä–µ–∑—É–ª—Ç–∞—Ç
 */
export async function verifyNativeFirebaseCode(
  code: string
): Promise<{
  success: boolean;
  error?: string;
  phoneNumber?: string;
  firebaseUid?: string;
}> {
  if (!confirmationResult) {
    return {
      success: false,
      error: '–ú–æ–ª—è, –ø—ä—Ä–≤–æ –∏–∑–ø—Ä–∞—Ç–µ—Ç–µ SMS –∫–æ–¥',
    };
  }

  try {
    console.log('üîë Verifying Firebase Native code...');

    const result = await confirmationResult.confirm(code);
    const user = result.user;

    console.log('‚úÖ Firebase Native phone verified:', user.phoneNumber);

    // –°–ª–µ–¥ —É—Å–ø–µ—à–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è, –Ω—É–ª–∏—Ä–∞–º–µ confirmation
    confirmationResult = null;

    return {
      success: true,
      phoneNumber: user.phoneNumber || undefined,
      firebaseUid: user.uid,
    };
  } catch (error: any) {
    console.error('‚ùå Firebase Native verification error:', error);

    let errorMessage = '–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∫–æ–¥';

    if (error.code === 'auth/invalid-verification-code') {
      errorMessage = '–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∫–æ–¥. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.';
    } else if (error.code === 'auth/code-expired') {
      errorMessage = '–ö–æ–¥—ä—Ç –µ –∏–∑—Ç–µ–∫—ä–ª. –ú–æ–ª—è, –∏–∑–ø—Ä–∞—Ç–µ—Ç–µ –Ω–æ–≤ –∫–æ–¥.';
    }

    return {
      success: false,
      error: errorMessage,
    };
  }
}

/**
 * –ò–∑—á–∏—Å—Ç–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ Firebase Native Phone Auth
 */
export function resetNativeFirebasePhoneAuth() {
  confirmationResult = null;
}
