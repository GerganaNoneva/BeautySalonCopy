import { Platform } from 'react-native';
import {
  signInWithPhoneNumber,
  PhoneAuthProvider,
  signInWithCredential,
  RecaptchaVerifier,
  ConfirmationResult,
  ApplicationVerifier,
} from 'firebase/auth';
import { firebaseAuth, isFirebaseConfigured } from './firebaseConfig';

/**
 * Firebase Phone Authentication Service
 * –ò–∑–ø–æ–ª–∑–≤–∞ Firebase –∑–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ SMS –∫–æ–¥–æ–≤–µ –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
 */

let recaptchaVerifier: RecaptchaVerifier | null = null;
let confirmationResult: ConfirmationResult | null = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞ reCAPTCHA verifier (—Å–∞–º–æ –∑–∞ web)
 * –ó–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Firebase –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —É–ø—Ä–∞–≤–ª—è–≤–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è—Ç–∞
 */
export function initializeRecaptcha(containerId: string = 'recaptcha-container') {
  if (Platform.OS === 'web' && firebaseAuth && !recaptchaVerifier) {
    try {
      recaptchaVerifier = new RecaptchaVerifier(firebaseAuth, containerId, {
        size: 'invisible',
        callback: () => {
          console.log('‚úÖ reCAPTCHA verified');
        },
        'expired-callback': () => {
          console.warn('‚ö†Ô∏è reCAPTCHA expired');
          recaptchaVerifier = null;
        },
      });
    } catch (error) {
      console.error('‚ùå reCAPTCHA initialization error:', error);
    }
  }
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä –∫—ä–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç
 * 0888123456 -> +359888123456
 */
function normalizePhone(phone: string): string {
  const cleaned = phone.replace(/\D/g, '');

  if (cleaned.startsWith('359')) {
    return `+${cleaned}`;
  }

  if (cleaned.startsWith('0')) {
    return `+359${cleaned.substring(1)}`;
  }

  return `+359${cleaned}`;
}

/**
 * –ò–∑–ø—Ä–∞—â–∞ SMS –∫–æ–¥ –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —á—Ä–µ–∑ Firebase
 * @param phone –¢–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä
 * @returns Promise —Å —Ä–µ–∑—É–ª—Ç–∞—Ç
 */
export async function sendFirebaseVerificationCode(
  phone: string
): Promise<{ success: boolean; error?: string }> {
  if (!isFirebaseConfigured()) {
    return {
      success: false,
      error: 'Firebase –Ω–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω. –î–æ–±–∞–≤–µ—Ç–µ credentials –≤ .env —Ñ–∞–π–ª–∞.',
    };
  }

  if (!firebaseAuth) {
    return {
      success: false,
      error: 'Firebase Auth –Ω–µ –µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω',
    };
  }

  try {
    const normalizedPhone = normalizePhone(phone);
    console.log(`üì± Sending Firebase SMS to: ${normalizedPhone}`);
    console.log('üì± Platform:', Platform.OS);

    // Firebase Phone Auth —Ä–∞–±–æ—Ç–∏ —Å–∞–º–æ –Ω–∞ Web –≤ Expo managed workflow
    if (Platform.OS !== 'web') {
      return {
        success: false,
        error: 'Firebase Phone Auth —Ä–∞–±–æ—Ç–∏ —Å–∞–º–æ –Ω–∞ web –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤ Expo. –ó–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ Twilio –∏–ª–∏ Mock SMS.',
      };
    }

    // –ó–∞ web –∏–∑–ø–æ–ª–∑–≤–∞–º–µ reCAPTCHA
    if (!recaptchaVerifier) {
      initializeRecaptcha();
    }

    if (!recaptchaVerifier) {
      return {
        success: false,
        error: 'reCAPTCHA –Ω–µ –µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω. –£–≤–µ—Ä–µ—Ç–µ —Å–µ —á–µ –∏–º–∞ <div id="recaptcha-container"></div> –≤ HTML-–∞.',
      };
    }

    confirmationResult = await signInWithPhoneNumber(
      firebaseAuth,
      normalizedPhone,
      recaptchaVerifier as ApplicationVerifier
    );

    console.log('‚úÖ Firebase SMS sent successfully');
    return { success: true };
  } catch (error: any) {
    console.error('‚ùå Firebase SMS error:', error);
    console.error('Error code:', error.code);
    console.error('Error message:', error.message);

    let errorMessage = '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ SMS';

    if (error.code === 'auth/invalid-phone-number') {
      errorMessage = '–ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä';
    } else if (error.code === 'auth/too-many-requests') {
      errorMessage = '–¢–≤—ä—Ä–¥–µ –º–Ω–æ–≥–æ –æ–ø–∏—Ç–∏. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –ø–æ-–∫—ä—Å–Ω–æ.';
    } else if (error.code === 'auth/quota-exceeded') {
      errorMessage = '–î–æ—Å—Ç–∏–≥–Ω–∞—Ç –ª–∏–º–∏—Ç –Ω–∞ SMS-–∏. –°–≤—ä—Ä–∂–µ—Ç–µ —Å–µ —Å –ø–æ–¥–¥—Ä—ä–∂–∫–∞.';
    } else if (error.code === 'auth/operation-not-allowed') {
      errorMessage = 'Phone Authentication –Ω–µ –µ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω –≤—ä–≤ Firebase Console. –ú–æ–ª—è, –∞–∫—Ç–∏–≤–∏—Ä–∞–π—Ç–µ –≥–æ.';
    } else if (error.code === 'auth/missing-phone-number') {
      errorMessage = '–õ–∏–ø—Å–≤–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä';
    } else if (error.message) {
      // –ü–æ–∫–∞–∑–≤–∞–º–µ —Ä–µ–∞–ª–Ω–∞—Ç–∞ –≥—Ä–µ—à–∫–∞ –∑–∞ debugging
      errorMessage = `Firebase –≥—Ä–µ—à–∫–∞: ${error.message}`;
    }

    return {
      success: false,
      error: errorMessage,
    };
  }
}

/**
 * –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–∞ SMS –∫–æ–¥ –∏–∑–ø—Ä–∞—Ç–µ–Ω —á—Ä–µ–∑ Firebase
 * @param code 6-—Ü–∏—Ñ—Ä–µ–Ω –∫–æ–¥
 * @returns Promise —Å —Ä–µ–∑—É–ª—Ç–∞—Ç –∏ Firebase user credential
 */
export async function verifyFirebaseCode(
  code: string
): Promise<{
  success: boolean;
  error?: string;
  phoneNumber?: string;
  firebaseUid?: string;
}> {
  if (!confirmationResult) {
    return {
      success: false,
      error: '–ú–æ–ª—è, –ø—ä—Ä–≤–æ –∏–∑–ø—Ä–∞—Ç–µ—Ç–µ SMS –∫–æ–¥',
    };
  }

  try {
    console.log('üîë Verifying Firebase code...');

    const result = await confirmationResult.confirm(code);
    const user = result.user;

    console.log('‚úÖ Firebase phone verified:', user.phoneNumber);

    // –°–ª–µ–¥ —É—Å–ø–µ—à–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è, –Ω—É–ª–∏—Ä–∞–º–µ confirmation
    confirmationResult = null;

    return {
      success: true,
      phoneNumber: user.phoneNumber || undefined,
      firebaseUid: user.uid,
    };
  } catch (error: any) {
    console.error('‚ùå Firebase verification error:', error);

    let errorMessage = '–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∫–æ–¥';

    if (error.code === 'auth/invalid-verification-code') {
      errorMessage = '–ù–µ–≤–∞–ª–∏–¥–µ–Ω –∫–æ–¥. –ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.';
    } else if (error.code === 'auth/code-expired') {
      errorMessage = '–ö–æ–¥—ä—Ç –µ –∏–∑—Ç–µ–∫—ä–ª. –ú–æ–ª—è, –∏–∑–ø—Ä–∞—Ç–µ—Ç–µ –Ω–æ–≤ –∫–æ–¥.';
    }

    return {
      success: false,
      error: errorMessage,
    };
  }
}

/**
 * –ò–∑—á–∏—Å—Ç–≤–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ Firebase Phone Auth
 */
export function resetFirebasePhoneAuth() {
  confirmationResult = null;
  if (recaptchaVerifier && Platform.OS === 'web') {
    try {
      recaptchaVerifier.clear();
    } catch (error) {
      console.error('Error clearing reCAPTCHA:', error);
    }
    recaptchaVerifier = null;
  }
}
