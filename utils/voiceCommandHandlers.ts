import { ParsedVoiceCommand } from './voiceCommandParser';
import { supabase } from '@/lib/supabase';
import { Alert, Linking } from 'react-native';

// –¢–∏–ø–æ–≤–µ –∑–∞ handlers
export interface VoiceCommandHandlerContext {
  // Callbacks
  setSelectedDate: (date: Date) => void;
  setShowNextFreeSlotsModal: (show: boolean) => void;
  setShowNewReservationModal2: (show: boolean) => void;
  setPreselectedDate: (date: Date | null) => void;
  setPreselectedTime: (time: string | null) => void;

  // State
  selectedDate: Date;
  appointments: any[];
  workingHours: any;

  // Router
  router: any;
  userId: string;
}

// –ì–ª–∞–≤–µ–Ω handler –∑–∞ –≤—Å–∏—á–∫–∏ –∫–æ–º–∞–Ω–¥–∏
export async function handleVoiceCommand(
  command: ParsedVoiceCommand,
  context: VoiceCommandHandlerContext
) {
  switch (command.type) {
    case 'show_next_free_slot':
      await handleShowNextFreeSlot(command, context);
      break;

    case 'show_next_n_free_slots':
      await handleShowNextNFreeSlots(command, context);
      break;

    case 'show_schedule_for_date':
      await handleShowScheduleForDate(command, context);
      break;

    case 'show_schedule_for_day':
      await handleShowScheduleForDay(command, context);
      break;

    case 'create_reservation':
      await handleCreateReservation(command, context);
      break;

    case 'client_info':
      await handleClientInfo(command, context);
      break;

    case 'open_chat':
      await handleOpenChat(command, context);
      break;

    case 'call_client':
      await handleCallClient(command, context);
      break;

    default:
      Alert.alert('–ù–µ—Ä–∞–∑–ø–æ–∑–Ω–∞—Ç–∞ –∫–æ–º–∞–Ω–¥–∞', '–ú–æ–ª—è, –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ —Å –ø–æ-—è—Å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞.');
  }
}

// Handler: –ü–æ–∫–∞–∂–∏ —Å–ª–µ–¥–≤–∞—â–∏—è —Å–≤–æ–±–æ–¥–µ–Ω —á–∞—Å
async function handleShowNextFreeSlot(
  command: ParsedVoiceCommand,
  context: VoiceCommandHandlerContext
) {
  Alert.alert(
    '‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∞',
    '–ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Å–ª–µ–¥–≤–∞—â–∏—è —Å–≤–æ–±–æ–¥–µ–Ω —á–∞—Å',
    [{ text: 'OK', onPress: () => context.setShowNextFreeSlotsModal(true) }]
  );
}

// Handler: –ü–æ–∫–∞–∂–∏ —Å–ª–µ–¥–≤–∞—â–∏—Ç–µ N —Å–≤–æ–±–æ–¥–Ω–∏ —á–∞—Å–∞
async function handleShowNextNFreeSlots(
  command: ParsedVoiceCommand,
  context: VoiceCommandHandlerContext
) {
  const count = command.data?.count || 5;

  Alert.alert(
    '‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∞',
    `–ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Å–ª–µ–¥–≤–∞—â–∏—Ç–µ ${count} —Å–≤–æ–±–æ–¥–Ω–∏ —á–∞—Å–∞`,
    [{ text: 'OK', onPress: () => context.setShowNextFreeSlotsModal(true) }]
  );
}

// Handler: –ü–æ–∫–∞–∂–∏ –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –¥–∞—Ç–∞
async function handleShowScheduleForDate(
  command: ParsedVoiceCommand,
  context: VoiceCommandHandlerContext
) {
  if (!command.data?.date) {
    Alert.alert('–ì—Ä–µ—à–∫–∞', '–ù–µ —É—Å–ø—è—Ö –¥–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞—è –¥–∞—Ç–∞—Ç–∞');
    return;
  }

  const date = new Date(command.data.date);
  const dateStr = date.toLocaleDateString('bg-BG', {
    day: 'numeric',
    month: 'long',
    year: 'numeric'
  });

  Alert.alert(
    '‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∞',
    `–ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –∑–∞ ${dateStr}`,
    [{
      text: 'OK',
      onPress: () => context.setSelectedDate(date)
    }]
  );
}

// Handler: –ü–æ–∫–∞–∂–∏ –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –¥–µ–Ω –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞
async function handleShowScheduleForDay(
  command: ParsedVoiceCommand,
  context: VoiceCommandHandlerContext
) {
  if (!command.data?.dayOfWeek) {
    Alert.alert('–ì—Ä–µ—à–∫–∞', '–ù–µ —É—Å–ø—è—Ö –¥–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞—è –¥–µ–Ω—è');
    return;
  }

  const dayOfWeek = command.data.dayOfWeek;

  // –ù–∞–º–∏—Ä–∞–º–µ —Å–ª–µ–¥–≤–∞—â–∏—è —Ç–∞–∫—ä–≤ –¥–µ–Ω
  const today = new Date();
  const dayNames = ['–Ω–µ–¥–µ–ª—è', '–ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä—è–¥–∞', '—á–µ—Ç–≤—ä—Ä—Ç—ä–∫', '–ø–µ—Ç—ä–∫', '—Å—ä–±–æ—Ç–∞'];
  const targetDayIndex = dayNames.indexOf(dayOfWeek.toLowerCase());

  if (targetDayIndex === -1) {
    Alert.alert('–ì—Ä–µ—à–∫–∞', '–ù–µ–≤–∞–ª–∏–¥–µ–Ω –¥–µ–Ω –æ—Ç —Å–µ–¥–º–∏—Ü–∞—Ç–∞');
    return;
  }

  const currentDayIndex = today.getDay();
  let daysToAdd = targetDayIndex - currentDayIndex;

  // –ê–∫–æ –¥–µ–Ω—è—Ç –µ —Å—ä—â–∏—è –∏–ª–∏ –µ –º–∏–Ω–∞–ª, –¥–æ–±–∞–≤—è–º–µ 7 –¥–Ω–∏
  if (daysToAdd <= 0) {
    daysToAdd += 7;
  }

  const targetDate = new Date(today);
  targetDate.setDate(today.getDate() + daysToAdd);

  const dateStr = targetDate.toLocaleDateString('bg-BG', {
    day: 'numeric',
    month: 'long',
    weekday: 'long'
  });

  Alert.alert(
    '‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∞',
    `–ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –∑–∞ ${dateStr}`,
    [{
      text: 'OK',
      onPress: () => context.setSelectedDate(targetDate)
    }]
  );
}

// Handler: –°—ä–∑–¥–∞–π —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è
async function handleCreateReservation(
  command: ParsedVoiceCommand,
  context: VoiceCommandHandlerContext
) {
  const { date, startTime, endTime, serviceName, clientName } = command.data || {};

  if (!date || !startTime || !serviceName || !clientName) {
    Alert.alert(
      '–ù–µ–ø—ä–ª–Ω–∏ –¥–∞–Ω–Ω–∏',
      '–ó–∞ –¥–∞ —Å—ä–∑–¥–∞–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è, –º–∏ —Ç—Ä—è–±–≤–∞—Ç: –¥–∞—Ç–∞, –Ω–∞—á–∞–ª–µ–Ω —á–∞—Å, —É—Å–ª—É–≥–∞ –∏ –∏–º–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç'
    );
    return;
  }

  const reservationDate = new Date(date);
  const dateStr = reservationDate.toLocaleDateString('bg-BG', {
    day: 'numeric',
    month: 'long'
  });

  Alert.alert(
    '‚úÖ –û—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞',
    `–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è –∑–∞ ${clientName}\n–î–∞—Ç–∞: ${dateStr}\n–ß–∞—Å: ${startTime}${endTime ? ` - ${endTime}` : ''}\n–£—Å–ª—É–≥–∞: ${serviceName}`,
    [
      {
        text: 'OK',
        onPress: () => {
          // –ó–∞–¥–∞–≤–∞–º–µ –ø—Ä–µ–¥-–ø–æ–ø—ä–ª–Ω–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
          context.setPreselectedDate(reservationDate);
          context.setPreselectedTime(startTime);
          context.setSelectedDate(reservationDate);

          // –û—Ç–≤–∞—Ä—è–º–µ –º–æ–¥–∞–ª–∞ –∑–∞ –Ω–æ–≤–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è
          // –î–∞–Ω–Ω–∏—Ç–µ —â–µ –±—ä–¥–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–ø—ä–ª–Ω–µ–Ω–∏ –æ—Ç NewReservationModal2
          (global as any).__voiceCommandData = {
            clientName,
            serviceName,
            startTime,
            endTime,
            date: date,
          };

          context.setShowNewReservationModal2(true);
        }
      },
      { text: '–û—Ç–∫–∞–∑', style: 'cancel' }
    ]
  );
}

// Handler: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∫–ª–∏–µ–Ω—Ç (–∫–æ–≥–∞ –∏–º–∞ —á–∞—Å)
async function handleClientInfo(
  command: ParsedVoiceCommand,
  context: VoiceCommandHandlerContext
) {
  const clientName = command.data?.clientName;

  if (!clientName) {
    Alert.alert('–ì—Ä–µ—à–∫–∞', '–ù–µ —É—Å–ø—è—Ö –¥–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞—è –∏–º–µ—Ç–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞');
    return;
  }

  try {
    // –¢—ä—Ä—Å–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–∞—Ç–∞
    const { data: clients, error: clientError } = await supabase
      .from('profiles')
      .select('id, full_name')
      .ilike('full_name', `%${clientName}%`)
      .limit(5);

    if (clientError) throw clientError;

    if (!clients || clients.length === 0) {
      Alert.alert('–ù–µ –Ω–∞–º–µ—Ä–µ–Ω', `–ö–ª–∏–µ–Ω—Ç —Å –∏–º–µ "${clientName}" –Ω–µ –±–µ—à–µ –Ω–∞–º–µ—Ä–µ–Ω`);
      return;
    }

    // –í–∑–µ–º–∞–º–µ –ø—ä—Ä–≤–∏—è –∫–ª–∏–µ–Ω—Ç (–Ω–∞–π-–¥–æ–±—Ä–æ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ)
    const client = clients[0];

    // –¢—ä—Ä—Å–∏–º —Å–ª–µ–¥–≤–∞—â–∏ —á–∞—Å–æ–≤–µ –∑–∞ –∫–ª–∏–µ–Ω—Ç–∞
    const today = new Date();
    const todayStr = today.toISOString().split('T')[0];

    const { data: futureAppointments, error: aptError } = await supabase
      .from('appointments')
      .select('appointment_date, start_time, end_time, services(name)')
      .eq('client_id', client.id)
      .gte('appointment_date', todayStr)
      .order('appointment_date', { ascending: true })
      .order('start_time', { ascending: true })
      .limit(3);

    if (aptError) throw aptError;

    if (!futureAppointments || futureAppointments.length === 0) {
      Alert.alert(
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∫–ª–∏–µ–Ω—Ç',
        `${client.full_name} –Ω—è–º–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏ —á–∞—Å–æ–≤–µ`
      );
      return;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞
    const appointmentsText = futureAppointments
      .map((apt: any) => {
        const date = new Date(apt.appointment_date);
        const dateStr = date.toLocaleDateString('bg-BG', {
          day: 'numeric',
          month: 'long',
          weekday: 'short'
        });
        return `‚Ä¢ ${dateStr} –≤ ${apt.start_time.slice(0, 5)} - ${apt.services?.name || '–ë–µ–∑ —É—Å–ª—É–≥–∞'}`;
      })
      .join('\n');

    Alert.alert(
      `üìÖ ${client.full_name}`,
      `–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏ —á–∞—Å–æ–≤–µ:\n\n${appointmentsText}`
    );
  } catch (error) {
    console.error('Error fetching client info:', error);
    Alert.alert('–ì—Ä–µ—à–∫–∞', '–ù–µ —É—Å–ø—è—Ö –¥–∞ –∏–∑–≤–ª–µ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∫–ª–∏–µ–Ω—Ç–∞');
  }
}

// Handler: –û—Ç–≤–æ—Ä–∏ —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç
async function handleOpenChat(
  command: ParsedVoiceCommand,
  context: VoiceCommandHandlerContext
) {
  const clientName = command.data?.clientName;

  if (!clientName) {
    Alert.alert('–ì—Ä–µ—à–∫–∞', '–ù–µ —É—Å–ø—è—Ö –¥–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞—è –∏–º–µ—Ç–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞');
    return;
  }

  try {
    // –¢—ä—Ä—Å–∏–º –∫–ª–∏–µ–Ω—Ç–∞
    const { data: clients, error } = await supabase
      .from('profiles')
      .select('id, full_name')
      .ilike('full_name', `%${clientName}%`)
      .limit(5);

    if (error) throw error;

    if (!clients || clients.length === 0) {
      Alert.alert('–ù–µ –Ω–∞–º–µ—Ä–µ–Ω', `–ö–ª–∏–µ–Ω—Ç —Å –∏–º–µ "${clientName}" –Ω–µ –±–µ—à–µ –Ω–∞–º–µ—Ä–µ–Ω`);
      return;
    }

    const client = clients[0];

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∞ conversation
    const { data: conversation } = await supabase
      .from('conversations')
      .select('id')
      .eq('admin_id', context.userId)
      .eq('client_id', client.id)
      .maybeSingle();

    if (conversation) {
      context.router.push(`/(admin)/messages?conversationId=${conversation.id}`);
    } else {
      context.router.push(`/(admin)/messages?newChat=${client.id}`);
    }

    Alert.alert('‚úÖ –ì–æ—Ç–æ–≤–æ', `–û—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ —á–∞—Ç —Å ${client.full_name}`);
  } catch (error) {
    console.error('Error opening chat:', error);
    Alert.alert('–ì—Ä–µ—à–∫–∞', '–ù–µ —É—Å–ø—è—Ö –¥–∞ –æ—Ç–≤–æ—Ä—è —á–∞—Ç–∞');
  }
}

// Handler: –ü–æ–∑–≤—ä–Ω–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç
async function handleCallClient(
  command: ParsedVoiceCommand,
  context: VoiceCommandHandlerContext
) {
  const clientName = command.data?.clientName;

  if (!clientName) {
    Alert.alert('–ì—Ä–µ—à–∫–∞', '–ù–µ —É—Å–ø—è—Ö –¥–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞—è –∏–º–µ—Ç–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞');
    return;
  }

  try {
    // –¢—ä—Ä—Å–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º—É
    const { data: clients, error } = await supabase
      .from('profiles')
      .select('id, full_name, phone')
      .ilike('full_name', `%${clientName}%`)
      .limit(5);

    if (error) throw error;

    if (!clients || clients.length === 0) {
      Alert.alert('–ù–µ –Ω–∞–º–µ—Ä–µ–Ω', `–ö–ª–∏–µ–Ω—Ç —Å –∏–º–µ "${clientName}" –Ω–µ –±–µ—à–µ –Ω–∞–º–µ—Ä–µ–Ω`);
      return;
    }

    const client = clients[0];

    if (!client.phone) {
      Alert.alert('–ù—è–º–∞ —Ç–µ–ª–µ—Ñ–æ–Ω', `${client.full_name} –Ω—è–º–∞ –∑–∞–ø–∏—Å–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä`);
      return;
    }

    // –û—Ç–≤–∞—Ä—è–º–µ dialer-–∞
    Alert.alert(
      '–û–±–∞–∂–¥–∞–Ω–µ',
      `–©–µ —Å–µ –æ–±–∞–¥—è –Ω–∞ ${client.full_name} (${client.phone})`,
      [
        {
          text: '–ü–æ–∑–≤—ä–Ω–∏',
          onPress: () => Linking.openURL(`tel:${client.phone}`)
        },
        { text: '–û—Ç–∫–∞–∑', style: 'cancel' }
      ]
    );
  } catch (error) {
    console.error('Error calling client:', error);
    Alert.alert('–ì—Ä–µ—à–∫–∞', '–ù–µ —É—Å–ø—è—Ö –¥–∞ –Ω–∞–º–µ—Ä—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞');
  }
}
